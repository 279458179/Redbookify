
// This is an AI-powered function that generates a XiaoHongShu-style blog post based on a given book title.

'use server';

import {ai} from '@/ai/genkit';
import {z}from 'genkit';

/**
 * @fileOverview Generates a XiaoHongShu-style blog post from a book title, a cover image, and 9 accompanying images.
 *
 * - generateXiaoHongShuPost - A function that generates a XiaoHongShu-style blog post, a cover image, and 9 accompanying images.
 * - GenerateXiaoHongShuPostInput - The input type for the generateXiaoHongShuPost function.
 * - GenerateXiaoHongShuPostOutput - The return type for the generateXiaoHongShuPost function.
 */

const GenerateXiaoHongShuPostInputSchema = z.object({
  bookTitle: z.string().describe('The title of the book to generate a blog post for.'),
  scrapedContent: z.string().optional().describe('The scraped content from websites.'),
});

export type GenerateXiaoHongShuPostInput = z.infer<typeof GenerateXiaoHongShuPostInputSchema>;

const GenerateXiaoHongShuPostOutputSchema = z.object({
  blogPost: z.string().describe('The generated XiaoHongShu-style blog post. It should be plain text with emojis and hashtags, without Markdown bolding.'),
  coverImageUrl: z.string().describe('A URL for a generated high-class cover image (3:4 aspect ratio) for the book. This is a data URI.'),
  imageUrls: z.array(z.string()).describe('An array of URLs for 9 generated accompanying images (3:4 aspect ratio) that complement the blog post. These are data URIs.'),
});

export type GenerateXiaoHongShuPostOutput = z.infer<typeof GenerateXiaoHongShuPostOutputSchema>;

export async function generateXiaoHongShuPost(
  input: GenerateXiaoHongShuPostInput
): Promise<GenerateXiaoHongShuPostOutput> {
  return generateXiaoHongShuPostFlow(input);
}

const generateXiaoHongShuPostPrompt = ai.definePrompt({
  name: 'generateXiaoHongShuPostPrompt',
  input: {schema: GenerateXiaoHongShuPostInputSchema},
  output: {schema: z.object({ blogPost: GenerateXiaoHongShuPostOutputSchema.shape.blogPost })}, // Only blogPost for this prompt
  prompt: `You are an expert social media content creator, specializing in the XiaoHongShu (Little Red Book) platform.
Your primary goal is to generate an engaging and insightful blog post about the book titled "{{{bookTitle}}}", focusing on the key lessons learned, actionable takeaways (干货), and personal insights gained from reading it, rather than simply promoting the book.
If available, use the following scraped content for additional context:
{{{scrapedContent}}}

To craft a high-quality post that resonates with the XiaoHongShu audience, please utilize the following advanced content generation strategies and examples. You can select the most fitting strategy or combine elements from several. The final output must be in Chinese, incorporate emojis and relevant hashtags, and be approximately 300-500 words, structured with short paragraphs and potentially headings.

**Important Tone and Formatting Guidelines:**
*   **Natural & Human-like Tone:** The tone should be very natural, authentic, and human-like, as if written by a real person sharing their genuine thoughts and excitement. Avoid any language that sounds robotic, overly academic, or like it was generated by an AI. Think about how a friend would recommend a book, focusing on what they personally got out of it.
*   **No Markdown Bolding:** Crucially, do **not** use Markdown-style bolding (e.g., \`**text**\` or \`__text__\`). Emphasis should be conveyed through natural language, word choice, sentence structure, emojis, and paragraph breaks, not by wrapping words in asterisks or underscores. The output should be plain text in this regard.

**Content Generation Strategies & Examples (参照以下模板进行创作):**

**1. 明确书籍类型+核心受众 (Clarify Book Type + Core Audience)**
"请分析《{{{bookTitle}}}》中3个最能引发[XX人群，请根据书籍内容具体化，例如：年轻职场女性、初为人母的妈妈、创业者等]共鸣的情节或观点，比如[情感困境/职场难题/成长痛点，请根据书籍内容具体化]相关片段。需要具体到角色在[某个具体场景]中的心理转折，或某个观点如何帮助解决[某个具体问题]，重点分享由此获得的启发。 "
*示例：《被讨厌的勇气》中3个最能引发25-35岁职场人共鸣的对话片段，比如面对同事过度索求时如何设立边界的具体案例，要求包含哲人与青年在咖啡厅辩论的逐句对话，并提炼出可应用的沟通技巧。*

**2. 痛点具象化+解决方案提取 (Concrete Pain Points + Solution Extraction)**
"提取书中解决[具体痛点，例如：拖延症、沟通障碍、情绪内耗等]的颠覆性观点或实用方法，对比常规认知：例如当大多数人认为[常见误区]时，书中通过[某角色故事/具体章节内容]证明了[反常识结论]或提供了[实用技巧]，需要包含[数据/实验结果/人物前后对比，如有则引用]等说服要素，并强调这些方法如何应用到实际生活中。"
*示例：在《原子习惯》中提取关于'微小改变带来巨大差异'的理论，对比传统认知中'需要巨大意志力才能改变'的误区，引用书中健身房会员打卡实验数据，以及主人公通过2分钟法则改变作息的完整故事链，最终总结出读者可以立即尝试的小步骤。*

**3. 场景化片段+感官描写 (Scene-based Snippets + Sensory Descriptions & Insights)**
"寻找书中包含五感描写的关键场景，或能引发深刻感悟的片段：比如深夜办公室的键盘声/咖啡凉透的触感/项目失败后地铁站台的冷风，要求该片段同时展现[某种人性洞察或人生哲理]，类似'她发现自己拼命追逐的KPI不过是贴在墓碑上的奖状'这类隐喻，并分享这个洞察对自己的影响。"

**4. 金句二次创作公式 (Golden Sentence Re-creation Formula & Application)**
"将书中[某个复杂理论/核心观点]转化为'个人痛点+书中智慧比喻+行动指令'句式：例如'当你在[具体场景]反复陷入[某种痛苦]，书中提到这就像[某个隐喻物]，我学到应该记住[书中解决方案提炼成具体行动步骤]，就像书中[某人物]在[某章节]的做法那样，开始尝试[具体小改变]。'"
*示例：把《非暴力沟通》的观察-感受-需求-请求框架转化为：'当下次伴侣说“你从不关心我”时，别急着辩解（停止动作），我从书中学到，这就像书中第三章的咨询师那样，先问“你感到孤独是因为希望周末一起做饭吗？”（书中方法具象化），这帮助我更好地理解对方。''*

**5. 悬念结构设计 (Suspense Structure Design for Takeaways)**
"用书中[某个未解谜题/关键转折点/令人惊讶的观点]设计互动钩子，引导读者思考其深层含义或应用价值：'所有人都以为[常规结局/普遍看法]，但[书中人物/观点]在[某页码/某章节]揭示了...（截断在关键点），这让我反思...评论区猜猜这个观点还能用在哪些地方/你从中学到了什么，明晚揭晓我的完整感悟/一起讨论'。"

**进阶技巧 (Advanced Techniques):**

*   **认知冲突法 (Cognitive Conflict Method for Deeper Learning):** "列出书中3个违反直觉但非常有价值的结论，例如'拖延不是时间管理问题而是情绪调节失败'，并匹配对应的书中案例或论证片段，分享这些观点如何改变了你的看法或行为。"
*   **时间锚点法 (Time Anchor Method for Relatability):** "提取书中包含明确时间地点的片段，或将书中的智慧应用到你过去的某个具体经历中：'回想2016年11月8日我在纽约地铁站遇到的困境，如果当时读了这本书，书中关于...的观点也许能帮我...这个场景如何改变了我对财富/人生/XXX的看法？' （请从书中寻找类似细节或结合个人经历）"
*   **多维度证据链 (Multi-dimensional Evidence Chain for Practical Application):** "请将书中某个核心理论/实用建议拆解为：1个实验数据（如有）+1个企业/名人案例（如有）+1个角色故事片段+1句专家/作者访谈引语（如有），并说明这个理论如何指导我们解决实际问题。"

**请确保最终生成的笔记:**
*   具有具体场景代入感，让读者感同身受。
*   能引发认知冲突和好奇感，激发读者深入思考。
*   提供可视化的解决方案或具体的启发，强调“学到了什么”和“可以怎么做”。
*   包含符合平台算法的互动要素 (如提问、分享个人经历、引导评论)。
*   语言为简体中文。
*   **语气非常自然、口语化、有温度，像一个真实的朋友在分享读书心得和个人成长，避免任何AI写作的痕迹。**
*   **绝对不要使用任何Markdown的加粗标记 (例如 \`**文字**\` 或 \`__文字__\`)。所有的文字内容都应该是普通文本，通过自然的语言表达、段落结构、表情符号和标签来组织和强调内容。**
*   **侧重干货与启发 (Focus on Value and Insights):** 笔记的核心应该是从书中提炼出的有价值的“干货”——即具体的知识、方法、感悟或启发，而不仅仅是书籍的推荐或概要。要让读者觉得读完笔记有所收获。
`,
});

const generateImage = async (promptText: string, placeholderSize: string = "300x400"): Promise<string> => {
  try {
    const { media } = await ai.generate({
      model: 'googleai/gemini-2.0-flash-exp',
      prompt: promptText,
      config: {
        responseModalities: ['TEXT', 'IMAGE'],
         safetySettings: [ // Add safety settings to allow more content generation
          { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_NONE' },
          { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_NONE' },
          { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_NONE' },
          { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_NONE' },
        ],
      },
    });
    if (media && media.url) {
      return media.url; // This should be a data URI
    }
    console.warn('Image generation resulted in no media URL for prompt:', promptText);
    return `https://placehold.co/${placeholderSize}.png?text=Image+Gen+Failed`;
  } catch (e) {
    console.error('Image generation failed for one image:', e);
    return `https://placehold.co/${placeholderSize}.png?text=Error+Generating`; // Return a placeholder on error
  }
};


const generateXiaoHongShuPostFlow = ai.defineFlow(
  {
    name: 'generateXiaoHongShuPostFlow',
    inputSchema: GenerateXiaoHongShuPostInputSchema,
    outputSchema: GenerateXiaoHongShuPostOutputSchema,
  },
  async (input) => {
    // 1. Generate the blog post
    const { output: textPromptOutput } = await generateXiaoHongShuPostPrompt(input);
    const blogPost = textPromptOutput!.blogPost;

    // 2. Generate Cover Image
    const coverImagePrompt = `Generate a sophisticated and high-class vertical cover image (3:4 aspect ratio) for a Xiaohongshu (Little Red Book) post about the book "${input.bookTitle}". The image should be visually striking, artistic, and thematically relevant to the book, suitable as an appealing main graphic. Avoid rendering any text on the image.`;
    const coverImageUrlPromise = generateImage(coverImagePrompt, "300x400");

    // 3. Generate 9 accompanying images
    const accompanyingImagePrompts = Array(9).fill(null).map((_, index) =>
      `Generate a realistic and visually appealing vertical image (3:4 aspect ratio) suitable for a Xiaohongshu (Little Red Book) post. The post is about the book "${input.bookTitle}". The image should be high-quality and engaging, perhaps depicting a scene, concept, or mood related to the book's themes that would resonate with a Xiaohongshu audience. Avoid text overlays on this image. This is image ${index + 1} of 9.`
    );

    const accompanyingImagePromises = accompanyingImagePrompts.map(promptText => generateImage(promptText, "300x400"));
    
    const [coverImageUrl, ...imageUrls] = await Promise.all([coverImageUrlPromise, ...accompanyingImagePromises]);

    return { blogPost, coverImageUrl, imageUrls };
  }
);

    
